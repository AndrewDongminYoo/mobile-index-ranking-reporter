# -*- coding: utf-8 -*-
"""
Django settings for ranker project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os.path
import sys
from pathlib import Path

from environ import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nib=$8z89eyeq9!v09-(=1asc=8u!x@b1!stq&^wng*1rd-uwa'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True if os.getenv(key="COMPUTERNAME") else False

ALLOWED_HOSTS = ['apprank.i-screen.kr', '13.125.164.253', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crawler.apps.CrawlerConfig',
    'django_crontab',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CRONTAB_DJANGO_SETTINGS_MODULE = 'ranker.settings'

CRONJOBS = [
    ('*/15 0-15 * * *', 'crawler.cron.ive_korea_internal_api', ">> /home/ubuntu/ive.log"),
    ('0 * * * *', 'crawler.cron.crawl_app_store_hourly', ">> /home/ubuntu/0000.log"),
    ('10 15 * * *', 'crawler.cron.following_one_crawl', '>> /home/ubuntu/0010.log'),
    ('10 3 * * *', 'crawler.cron.crawl_app_store_daily', '>> /home/ubuntu/1210.log'),
]

ROOT_URLCONF = 'ranker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ranker.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

env = Env()
env.read_env(str(BASE_DIR / '.env'))
ENVIRONMENT = env('ENVIRONMENT', default='development')

DATABASES = {
    'default': {
        'ENGINE': env('DJANGO_DATABASE_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': env('DJANGO_DATABASE_NAME', default=str(BASE_DIR / 'db.sqlite3')),
        'USER': env('DJANGO_DATABASE_USER', default=''),
        'PASSWORD': env('DJANGO_DATABASE_PASSWORD', default=''),
        'HOST': env('DJANGO_DATABASE_HOST', default=''),
        'PORT': env('DJANGO_DATABASE_PORT', default=''),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "assets")

STATIC_URL = 'static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SLACK_WEBHOOK_URL = env('SLACK_WEBHOOK_URL', default='')

if not DEBUG:
    DEFAULT_LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'formatters': {
            'django.server': {
                '()': 'django.utils.log.ServerFormatter',
                'format': '[{server_time}] {message}',
                'style': '{',
            },
            'standard': {
                'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'filters': ['require_debug_true'],
                'class': 'logging.StreamHandler',
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filters': ['require_debug_false'],
                'filename': '/home/ubuntu/debug.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 5,
                'formatter': 'standard',
            },
        },
        'loggers': {
            'django.server': {
                'handlers': ['django.server'],
                'level': 'INFO',
                'propagate': False,
            },
            'django': {
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'ranker': {
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': True,
            }
        },
    }

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json']

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'
CELERY_ENABLE_UTC = True

from celery.schedules import crontab
from datetime import timedelta

CELERYBEAT_SCHEDULE = {
    'update-rank': {
        'task': 'ranker.tasks.add',
        'schedule': timedelta(seconds=10),
        'args': (1, 2),
    },
}
